USE casestudy1

--DEPTS TABLE

CREATE TABLE DEPTS(DNO INT PRIMARY KEY,DNAME VARCHAR(10) NOT NULL,LOCATION VARCHAR(10) CHECK(LOCATION IN('IND','USA','UK')))
INSERT INTO DEPTS VALUES(10,'HR','IND')
INSERT INTO DEPTS VALUES(20,'ADMIN','USA')
INSERT INTO DEPTS VALUES(30,'PRODUCT','UK')
INSERT INTO DEPTS VALUES(40,'ACCOUNTS','USA')
INSERT INTO DEPTS VALUES(50,'ADMIN','IND')
SP_HELP 'DEPTS'   --STORED PROCEDURE SP_HELP i.e; DESCRIPTION OF DEPTS TABLE
SELECT *FROM DEPTS

/*SECOND TABLE FOR EMPS*/
ALTER TABLE EMPS(EID INT PRIMARY KEY,ENAME VARCHAR(10) NOT NULL,SALARY INT CHECK(SALARY BETWEEN 10000 AND 50000),DNO INT FOREIGN KEY REFERENCES DEPTS(DNO)
-- constraints included for emps table

INSERT INTO EMPS VALUES(100,'SRIRAM',40000,10)
INSERT INTO EMPS VALUES(101,'NANI',25000,40)
INSERT INTO EMPS VALUES(102,'MANOJ',30000,20)
INSERT INTO EMPS VALUES(103,'SUSHANTH',20000,30)
INSERT INTO EMPS VALUES(104,'SRI',27000,50)
INSERT INTO EMPS VALUES(105,'RAMS',45000,10)
INSERT INTO EMPS VALUES(106,'DANNY',26000,20)
INSERT INTO EMPS VALUES(107,'RAHUL',16000,40)
INSERT INTO EMPS VALUES(108,'ROHIT',15000,50)
INSERT INTO EMPS VALUES(109,'DHAWAN',39000,30)
INSERT INTO EMPS VALUES(110,'VIRAT',29000,20)
INSERT INTO EMPS VALUES(111,'RISABH',16000,30)
SP_HELP 'EMPS'
SELECT *FROM EMPS   --dql query for selection of records for emps table

/*THIRD TABLE ON PROJECTS*/
CREATE TABLE PROJECTS(PID INT PRIMARY KEY,PNAME VARCHAR(10) NOT NULL)
INSERT INTO PROJECTS VALUES(1,'BANKING')
INSERT INTO PROJECTS VALUES(2,'SHOPPING')
INSERT INTO PROJECTS VALUES(3,'BILLING')
INSERT INTO PROJECTS VALUES(4,'RAILWAY')
INSERT INTO PROJECTS VALUES(5,'AIRLINE')
INSERT INTO PROJECTS VALUES(108,'NAVY')
INSERT INTO PROJECTS VALUES(104,'RAIWAY')
SP_HELP 'PROJECTS'
SELECT *FROM PROJECTS

/*FOURTH TABLE ON EMPPROJECTS*/
CREATE TABLE EMPPROJECTS(EID INT FOREIGN KEY REFERENCES EMPS(EID),PID INT FOREIGN KEY REFERENCES PROJECTS(PID))
-- FOREIGN KEY REFERENCE FROM EMPS TABLE

INSERT INTO EMPPROJECTS VALUES(100,1)
INSERT INTO EMPPROJECTS VALUES(101,2)
INSERT INTO EMPPROJECTS VALUES(102,3)
INSERT INTO EMPPROJECTS VALUES(103,4)
INSERT INTO EMPPROJECTS VALUES(104,5) 
SP_HELP EMPPROJECTS
SELECT *FROM EMPPROJECTS

--1ST QUERY
-- LIST ALL EMPS,DEPTS DETAILS WHICH DEPT HAS ATLEAST 1 OR MORE EMPLOYEES

SELECT *FROM EMPS WHERE DNO IN(SELECT DNO FROM DEPTS WHERE DNO=E.DNO)    -- USED CORRELATED SUBQUERY
SELECT *FROM EMPS
SELECT *FROM DEPTS WHERE DNO NOT IN(SELECT DNO FROM EMPS)
SELECT *FROM DEPTS


 --2ND QUERY
 --LIST ALL EMP,PROJECTS DETAILS WHERE EMPID MATCHES WITH PID

SELECT  EMPS.EID,EMPS.ENAME ,PROJECTS.PID,PROJECTS.PNAME FROM EMPS INNER JOIN PROJECTS ON EMPS.EID=PROJECTS.PID --USED INNER JOIN

-- 3RD QUERY
--TO GET TOTAL SUM OF SALARIES BASED ON DEPTNO WISE

SELECT DNO,SUM(SALARY) AS SALARY FROM  EMPS  GROUP BY DNO   -- USING  GROUP BY AGGREGATE FUNCTION

--4TH QUERY
-- WHICH DEPT DOES NOT EXISTS ANY EMP THOSE DETAILS?

SELECT DNAME FROM DEPTS WHERE DNO NOT IN(SELECT DNO FROM EMPS)   --NOT IN OPERATOR FOR NOT EXISTS ANY EMPLOYEE

--5TH QUERY
--LIST 5TH MINIMUM SALARY EMP DETAILS USING NTH QUERY METHOD

SELECT *FROM EMPS E WHERE 4=(SELECT COUNT(DISTINCT SALARY) FROM EMPS WHERE SALARY<E.SALARY)  --USED CORRELATED SUBQUERY

--6TH QUERY
--LIST WHICH EMPLOYEES TWO SALARIES ARE SAME

SELECT SALARY,EID,ENAME FROM EMPS WHERE SALARY IN(SELECT SALARY FROM EMPS GROUP BY  SALARY HAVING COUNT(*)>1)   --USED HAVING CLAUSE FOR EXTRA CONDITIONS

--7TH QUERY
--INSERT EMP DETAILS USING PROCEDURE IF EID IS UNIQUE,ENAME IS NOT NULL,SALARY GREATER THAN 12000 ?

CREATE PROC PC(@EID INT,@ENAME VARCHAR(10),@SALARY INT )   -- PROCEDURE NAMED AS PC
AS
BEGIN
SET NOCOUNT ON                               -- DOESNOT DISPLAYS ROWS INSERTED 
DECLARE @I INT
SELECT @I =COUNT(*)FROM EMPS WHERE EID=@EID
IF @EID=0 
PRINT 'CANT INSERT NULL VALUE INTO EID'
ELSE IF @I>0                                 -- CHECKS @I>0
PRINT 'EID ALREADY EXISTS'
ELSE IF @ENAME IS NULL                       -- CHECKS ENAME COLOUMN IS NULL
PRINT 'CANT INSERT NULL VALUE INTO ENAME'
ELSE IF @SALARY<12000                        -- CHECKS CONDITION WHERE SALARY <12000
PRINT 'SALARY SHOULD BE GREATER THAN 12000' 
ELSE
BEGIN
INSERT INTO EMPS(EID,ENAME,SALARY) VALUES(@EID,@ENAME,@SALARY)
PRINT 'RECORD INSERTED SUCCESSFULLY'
END
END
EXEC PC 1000,'KARTHIK',14000  -- RECORD INSERTED SUCCESSFULLY
EXEC PC 1111,'RAMS',300 -- CANT INSERT SALARY SHOULD BE GREATER THAN 12000
EXEC PC 106,'WRIDI',400 -- EID ALREADY EXISTS
EXEC PC 1010,NULL,12999  -- CANT INSERT NULL VALUE INTO ENAME
EXEC PC 2,'MANISH',12111  --- EID 2 ALREADY EXISTS


-- 8TH QUERY
-- LIST EMP MONTHLYSALARY,ANNUAL SALARY AND SAVE AS VIEW
--CREATING A VIEW TO SELECT EID,SALARY FROM EMPS TABLE AND  TO CALCULATE AS ANNUAL,MONTHLY SALARY

CREATE VIEW VIEW1 AS SELECT EID,SALARY AS MONTHLYSALARY,(SALARY*12) AS ANNUALSALARY FROM EMPS
SELECT *FROM VIEW1 --SELECTING VIEW1


-- 9TH QUERY
--CREATE ONE NEW EMPTABLE IN THAT TO STORE INSERTED,DELETED USING TRIGGER.

CREATE TABLE EMP2(EID INT,ENAME VARCHAR(10) NOT NULL,SALARY INT CHECK (SALARY BETWEEN 10000 AND 50000),DNO INT) --APPLYING CONSTRAINTS
SELECT *FROM EMP2
CREATE TRIGGER TR4 -- TRIGGER NAMED TR4
ON EMPS
FOR INSERT
AS
BEGIN
INSERT INTO EMP2 SELECT EID,ENAME,SALARY,DNO FROM INSERTED  
END
INSERT INTO EMPS(EID,ENAME,SALARY,DNO) VALUES(133,'ABHIMANYU',30000,10) --INSERTING VALUES INTO NAMED 4 COLOUMNS
INSERT INTO EMPS(EID,ENAME,SALARY,DNO) VALUES(134,'ABHIJIT',25000,10) -- INSERTING VALUES INTO NAMED 4 COLOUMNS
SELECT *FROM EMPS

CREATE TABLE EMP3(EID INT,ENAME VARCHAR(10) NOT NULL,SALARY INT CHECK(SALARY BETWEEN 10000 AND 50000),DNO INT)
SELECT *FROM EMP3
CREATE TRIGGER TR5  -- TRIGGER NAMED TR5
ON EMPS
FOR DELETE
AS
BEGIN
INSERT INTO EMP3 SELECT EID,ENAME,SALARY,DNO FROM DELETED
END
DELETE FROM EMPS WHERE EID=134  -- DELETES  EID RECORD
SELECT *FROM EMPS   -- RETRIEVE EMPS DETAILS


--10TH QUERY
--TO MAKE TAX()FUNCTION FOR GIVEN SALARY WITH 13%

CREATE FUNCTION TAX(@SALARY INT)
RETURNS FLOAT  -- RETURNS FLOAT DATAYPE
BEGIN
SET @SALARY=@SALARY+(@SALARY*0.13) -- TO CALCULATE SALARY WITH 13% tax
RETURN @SALARY
END 
SELECT dbo.TAX(SALARY) FROM EMPS    -- dbo is DATABASE OWNER WITH EXTENSION OF TAX FUNCTION