
--CREATING A DATABASE
CREATE DATABASE CASESTUDY
USE CASESTUDY

----CREATING EMPS TABLE AND INSERTING RECORDS
CREATE TABLE EMPS(EID INT PRIMARY KEY,ENAME VARCHAR(10) NOT NULL,SALARY INT CHECK(SALARY<50000 AND SALARY>10000),DNO INT FOREIGN KEY REFERENCES DEPTS(DNO))
INSERT INTO EMPS VALUES(10,'PALLAVI',30000,20),(20,'KEERTHI',15000,10),(30,'PRAVEEN',40000,20),(40,'MADHU',32000,30),(50,'SAI',45000,10)
SELECT *FROM EMPS
SP_HELP 'EMPS'

---CREATING DEPTS TABLE AND INSERTING RECORDS
CREATE TABLE DEPTS(DNO INT PRIMARY KEY,DNAME VARCHAR(10) NOT NULL,LOCATION VARCHAR(20) CHECK(LOCATION IN('IND','USA','UK')))
INSERT INTO DEPTS VALUES(10,'SALES','IND'),(20,'IT','USA'),(30,'FINANCE','UK'),(40,'IT','IND')
SELECT *FROM DEPTS

---CREATING PROJECT TABLE AND INSERTING RECORDS
CREATE TABLE PROJECT(PID INT PRIMARY KEY,PNAME VARCHAR(10) NOT NULL)
INSERT INTO PROJECT VALUES(10,'SOFTWARE'),(20,'WEBPAGE'),(30,'DATABASE'),(40,'JAVA'),(50,'APP')
SELECT *FROM PROJECT

--CREATING EMPPROJECTS TABLE AND INSERTING RECORDS
CREATE TABLE EMPPROJECTS(EID INT FOREIGN KEY REFERENCES EMPS(EID),PID INT FOREIGN KEY REFERENCES PROJECT(PID))
INSERT INTO EMPPROJECTS VALUES(10,20),(40,30),(30,10),(20,50),(10,30)
SELECT *FROM EMPPROJECTS

--Q1...
--TO GET ALL EMP,DEPT DETAILS WHICH DEPT ATLEAST 1 OR MORE EMPLOYEES
SELECT *FROM EMPS E WHERE EXISTS(SELECT DNO FROM DEPTS WHERE DNO=E.DNO)


--Q2...
--TO GET ALL EMP,PROJECT DETAILS WHICH EMP ID MATCH WITH PROJECT ID
 SELECT EMPS.*,PROJECT.* FROM EMPS INNER JOIN PROJECT
ON EMPS.EID=PROJECT.PID


--Q3..
--TO GET TOTAL SUM OF SALARIES BASED ON DEPT WISE
 SELECT DNO,SUM(SALARY) AS TOTAL_SAL FROM EMPS GROUP BY DNO


--Q4...
--TO GET DETAILS OF DEPT THAT DOESNOT HAVE ANY EMPLOYEE
SELECT DEPTS.DNO,DEPTS.DNAME,EMPS.ENAME FROM DEPTS FULL JOIN EMPS
ON DEPTS.DNO=EMPS.DNO
EXCEPT
SELECT DEPTS.DNO,DEPTS.DNAME,EMPS.ENAME FROM DEPTS INNER JOIN EMPS
ON DEPTS.DNO=EMPS.DNO


--Q5...
--TO GET 5TH MAXIMUM SALARY EMP DETAILS USING NTH QUERY
SELECT *FROM EMPS E WHERE 4=(SELECT COUNT(DISTINCT SALARY) FROM EMPS WHERE SALARY<E.SALARY)


--Q6....
--TO GET EMP DETAILS WHOSE SALARIES ARE SAME
 SELECT *FROM EMPS E WHERE 1<(SELECT COUNT(*) FROM EMPS WHERE SALARY=E.SALARY)
 UPDATE EMPS SET SALARY=40000 WHERE ENAME='PALLAVI'
 SELECT *FROM EMPS


--Q7...
--TO INSERT EMP DETAILS USING PROCEDURE IF EID IS UNIQUE,ENAME IS NOT NULL AND 
-- SALARY IS MORE THAN 12000
CREATE PROC P1(@ENO INT,@ENA VARCHAR(10),@SAL INT,@DNO INT)
AS
BEGIN
SET NOCOUNT ON
DECLARE @I INT,@J INT
SELECT @I=COUNT(*) FROM EMPS WHERE EID=@ENO
SELECT @J=COUNT(*) FROM EMPS WHERE DNO=@DNO
IF(@I>0)
  PRINT 'EID SHOULD BE UNIQUE'
ELSE IF(@J=0)
  PRINT 'DEPT NO DOESNOT EXISTS'
ELSE IF(@ENA IS NULL)
  PRINT 'ENAME SHOULD NOT BE NULL'
ELSE IF(@SAL<12000)
  PRINT 'SALARY SHOULD  BE GREATER THAN 12000'
ELSE
BEGIN
  INSERT INTO EMPS VALUES(@ENO,@ENA,@SAL,@DNO)
  PRINT 'RECORD INSERTED SUCCESSFULLY'
END
END
     EXEC P1 60,'AMULYA',45000,30
	 SELECT *FROM EMPS


--Q8...
--TO GET EMP MONTHLY SAL AND ANNUAL SAL AND SAVE AS VIEW
 CREATE VIEW VV AS SELECT SALARY M_SAL,(SALARY*12) A_SAL FROM EMPS
 SELECT * FROM VV

--Q9..
--TO CREATE ONE NEW EMPTABLE TO STORE INSERTED,DELETED DETAILS USING TRIGGER 
CREATE TABLE EMPTABLE(EID INT,ENAME VARCHAR(10),SALARY INT,DNO INT)
SELECT *FROM EMPTABLE
--CREATING TRIGER TO STORE INSERTED VALUES
CREATE TRIGGER TRN 
ON EMPS
FOR INSERT
AS
BEGIN
INSERT INTO EMPTABLE SELECT EID,ENAME,SALARY,DNO FROM INSERTED
END
   INSERT INTO EMPS VALUES(70,'AKHILA',49000,30)
   SELECT *FROM EMPS
   SELECT *FROM EMPTABLE
--CREATING TRIGGER TO STORE DELETED VALUES 
CREATE TRIGGER TR9
ON EMPS
FOR DELETE
AS
BEGIN
DELETE FROM EMPTABLE  SELECT EID,ENAME,SALARY,DNO FROM DELETED
END
     DELETE FROM EMPS WHERE ENAME='AKHILA'
	 SELECT *FROM EMPTABLE

 
 --Q10...
 --TO MAKE TAX() FUNCTION FOR GIVEN SALARY WITH 13%
 CREATE FUNCTION TAX(@SAL INT)
RETURNS INT
AS
BEGIN
SET @SAL=@SAL+(@SAL*0.13) 
RETURN @SAL
END
   SELECT DBO.TAX(SALARY) FROM EMPS