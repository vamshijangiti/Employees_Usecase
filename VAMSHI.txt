
create Database Employee

use Employee

---creating the department table
create table dept(dno int primary key,dname varchar(10) not null,Location varchar(20) check(location in('IND','USA','US')))

INSERT INTO dept VALUES(10,'ADMIN','IND')
INSERT INTO dept VALUES(20,'STAFF','US')
INSERT INTO dept VALUES(30,'HR','IND')
INSERT INTO dept VALUES(40,'ADMIN','USA')
INSERT INTO dept VALUES(50,'HR','US')
INSERT INTO dept VALUES(70,'Clerk','USA')


select * from dept

---creating the emp table

create Table emp(eid int unique not null,ename varchar(10) not null,salary int check(salary>=10000 and salary<=50000),dno int foreign key references dept(dno))

insert into emp values(1,'vamshi',50000,10)
insert into emp values(2,'Sriram',30000,20),(3,'Navya',45000,30),(4,'Akhila',45000,40),(5,'Amulya',35000,50)
insert into emp values(6,'Manasa',30000,60)

select * from emp


--creating the Projects Table

CREATE TABLE PROJECTS(PID INT PRIMARY KEY,PNAME VARCHAR(10) NOT NULL)
INSERT INTO PROJECTS VALUES(100,'.NET')
insert into PROJECTS values (101,'c#'),(102,'JAVA')
insert into PROJECTS values (104,'HTML')
insert into PROJECTS values (103,'ADO.net')


select * from PROJECTS

--creating the EmpProjects tables

create table empProjects (EID int foreign key references emp(eid),PID int Foreign key references projects(pid))

insert into empProjects values(1,100)
insert into empProjects values (2,101),(8,102)
insert into empProjects values (3,104)

select * from empProjects


---1st query--

-- LIST ALL EMPS,DEPTS DETAILS WHICH DEPT HAS ATLEAST 1 OR MORE EMPLOYEES

selecT * from emp e where dno  in (select dno from dept where dno=e.dno) 

select * from dept where dno not in (select dno from EMP)

select * from emp 
select * from dept 

---2nd Query---------------------------------------------------------------------------------------------------------------

 --LIST ALL EMP,PROJECTS DETAILS WHERE EMPID MATCHES WITH PID

select e.ename,e.eid,e.dno,p.PID,p.PNAME from emp e, PROJECTS p where eid in (select eid from empProjects where eid=e.eid and PID=p.PID)

select * from empProjects

---3rd Query---------------------------------------------------------------------------------------------------------------

--TO GET TOTAL SUM OF SALARIES BASED ON DEPTNO WISE

select dno,sum(salary) as TotalDeptSalary from emp group by dno 

---4th Query---------------------------------------------------------------------------------------------------------------

-- WHICH DEPT DOES NOT EXISTS ANY EMP THOSE DETAILS?

select dname from dept where dno not in (select dno from emp)

---5th Query---------------------------------------------------------------------------------------------------------------
--nth Query--

--LIST 5TH MINIMUM SALARY EMP DETAILS USING NTH QUERY METHOD

select * from emp e where 3=(select count (distinct salary) as minsalary from emp where salary<e.salary)

select salary from emp order by salary


--6th Query---------------------------------------------------------------------------------------------------------------

--LIST WHICH EMPLOYEES TWO SALARIES ARE SAME

--self Join--

select distinct  e.salary,e.ename from emp e ,emp r where e.salary=r.salary and e.eid!=r.eid

select * from emp


--7th Query---------------------------------------------------------------------------------------------------------------

--INSERT EMP DETAILS USING PROCEDURE IF EID IS UNIQUE,ENAME IS NOT NULL,SALARY GREATER THAN 12000 ?

create procedure p2 (@eid int,@ename varchar(20),@sal int,@dno int)
as 
begin
set nocount on
    DECLARE @I INT,@J INT
    SELECT @I=COUNT(*) FROM EMP WHERE eid=@eid
	select @j=count(*) from emp where dno=@dno
if(@I>0)
	print 'eid should be unique '
else if(@j=0)
	print 'deptno not exists'
else if (@ename is  null)
	print 'ename should not be null'
else if (@sal>12000)
	begin
		insert into emp values (@eid,@ename,@sal,@dno)
		print 'record inserted Successfully'
	end
else
print 'salary should be greater than 12000'
end


exec p2 10,nani,12001,30
exec p2 11,pallavi,41000,20

select name from sysobjects where xtype='p'

select * from emp

---8th Query---------------------------------------------------------------------------------------------------------------

-- LIST EMP MONTHLYSALARY,ANNUAL SALARY AND SAVE AS VIEW

Create view v1 as select salary,(salary*12) as yearlysal from emp

alter view v1 as select salary,(salary*12) as yearlysalary from emp

select * from v1

sp_help v1

--To get all the views
select name from sysobjects where xtype='v'


--9th Query---------------------------------------------------------------------------------------------------------------

--CREATE ONE NEW EMPTABLE IN THAT TO STORE INSERTED,DELETED USING TRIGGER.

---Trigger for Inserting The Records

---create a new table for inserting when tirggered

CREATE TABLE EMPNEW(EID INT,ENAME VARCHAR(10) NOT NULL,SALARY INT CHECK(SALARY BETWEEN 10000 AND 50000),DNO INT)
SELECT *FROM EMPNEW

----trigger program

go
create trigger tr1 on EMP ---creating the trigger
for insert---using the  for/after tirgger
as
set nocount on
declare @eid int,@ename varchar(20),@sal int,@dn int--declaring the variables
select @eid=i.eid from inserted i--selecting the values and setting them from inserted temporary table
select @ename=i.ename from inserted i
select @sal=i.salary from inserted i
set @dn=90
insert into empnew values(@eid,@ename,@sal,@dn)--automatically inserting the values into the EMPNEW table when inserted in EMP table
print 'triggered after insertion' ---printing the statement
go

insert into emp values(13,'sutrig',19000,60)----when we insert in this EMP then trigger will run every time and EMPNEW will be affected

select * from empnew



--Trigger for Deleting the Records

go
create TRIGGER tr2	--creating the trigger
ON EMP
FOR DELETE	--using the FOR/After trigger
AS
declare @eno int	--declaring the enumber
select @eno=d.eid from deleted d	--Selecting the eid From deleted temp tables
DELETE FROM EMPNEW WHERE EID=@eno	---deleting inthe EMPNEW table when deleted int EMP
print 'Deleted successfully triggered'

---automatic deleting in the EMPNEW table when you deleting the values in the EMP means tirggered
delete from emp where eid=13

SELECT *FROM empnew


--10 Query-------------------------------------------------------------------------------------------------------------

--TO MAKE TAX()FUNCTION FOR GIVEN SALARY WITH 13%

---Scalar Function--used to return single values
alter function f1(@sal int)
returns float
as 
begin
declare @tax float
set @tax=@sal-(@sal*0.13)
return @tax
end

select dbo.f1(50000)

---TABULAR FUNCTION ---returns the table

create function tax(@eno int) ---creating the function
returns table  ---returns the table
as
return (select eid,ENAME,salary*12 as yearlysal,(salary-(salary*0.13)) as TAX  from EMP where eid=@eno ) ---calculating the tax 

select * from dbo.tax(1)

--for getting all the functions 
select name from sysobjects where xtype='fn'


